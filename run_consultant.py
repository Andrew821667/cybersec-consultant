#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import time
import argparse
from cybersec_consultant import create_consultant
from cybersec_consultant.state_management import STATE
from cybersec_consultant.user_profiles import get_profile_manager

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
    parser.add_argument('--knowledge', '-k', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π')
    parser.add_argument('--model', '-m', help='–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤')
    parser.add_argument('--profile', '-p', help='–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ (standard, expert, beginner, educational, incident_response)')
    parser.add_argument('--documents', '-d', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (1-5)')
    parser.add_argument('--api-key', help='API –∫–ª—é—á OpenAI (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω)')
    parser.add_argument('--no-cache', action='store_true', help='–í—ã–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞')
    
    # –ù–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    parser.add_argument('--list-profiles', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    
    # –ù–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    parser.add_argument('--enrich', action='store_true', help='–û–±–æ–≥–∞—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ')
    parser.add_argument('--auto-enrich', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π')
    parser.add_argument('--enrich-interval', type=int, default=24, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24)')
    
    # –ù–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    parser.add_argument('--vt-api-key', help='API –∫–ª—é—á VirusTotal –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑')
    parser.add_argument('--abuseipdb-api-key', help='API –∫–ª—é—á AbuseIPDB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ IP-–∞–¥—Ä–µ—Å–æ–≤')
    parser.add_argument('--safebrowsing-api-key', help='API –∫–ª—é—á Google SafeBrowsing –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ URL')
    
    args = parser.parse_args()

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = args.api_key
    if not api_key:
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á OpenAI: ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if args.vt_api_key:
        os.environ["VIRUSTOTAL_API_KEY"] = args.vt_api_key
    if args.abuseipdb_api_key:
        os.environ["ABUSEIPDB_API_KEY"] = args.abuseipdb_api_key
    if args.safebrowsing_api_key:
        os.environ["SAFEBROWSING_API_KEY"] = args.safebrowsing_api_key

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    STATE.api_key = api_key
    if args.model:
        STATE.model_name = args.model
    if args.profile:
        STATE.profile = args.profile
    if args.documents and 1 <= args.documents <= 5:
        STATE.k_docs = args.documents
    if args.no_cache:
        STATE.use_cache = False

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
    if args.list_profiles:
        profile_manager = get_profile_manager()
        profiles = profile_manager.profiles
        print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–§–ò–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        print("-" * 50)
        for profile_id, profile in profiles.items():
            print(f"üîπ {profile_id}: {profile.get('name')}")
            print(f"   {profile.get('description')}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å: {profile.get('technical_level')}, –°—Ç–∏–ª—å: {profile.get('style')}")
            print("-" * 50)
        return

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    consultant = create_consultant()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if args.knowledge:
        consultant.load_knowledge_base(args.knowledge)

    # –û–±–æ–≥–∞—â–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.enrich:
        print("\nüîÑ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        success, message = consultant.enrich_knowledge_base(force_update=True)
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
        print(f"{status}: {message}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.auto_enrich:
        print(f"\nüîÑ –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {args.enrich_interval} —á–∞—Å–æ–≤)...")
        success = consultant.start_auto_enrichment(args.enrich_interval)
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
        print(f"{status} –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    consultant.run_interactive()

if __name__ == "__main__":
    main()
