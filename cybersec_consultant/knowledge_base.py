# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
"""

import os
import re
import time
import hashlib
from datetime import datetime
from tqdm.auto import tqdm
import json

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document

from cybersec_consultant.config import ConfigManager, DATA_DIR

class DocumentProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        self.supported_formats = {
            '.txt': self._process_txt,
            '.csv': self._process_csv,
            '.pdf': self._process_pdf,
            '.docx': self._process_docx,
            '.doc': self._process_docx,  # .doc –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ .docx
        }
        self.config_manager = ConfigManager()

    def _get_file_extension(self, filename):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
        _, ext = os.path.splitext(filename)
        return ext.lower()

    def _process_txt(self, file_bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        return file_bytes.decode("utf-8")

    def _process_csv(self, file_bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–æ–≤"""
        content = file_bytes.decode("utf-8")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CSV –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        lines = content.split('\n')
        if not lines:
            return ""

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        headers = lines[0].split(',')
        result = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for i, line in enumerate(lines[1:]):
            if not line.strip():
                continue
            values = line.split(',')
            row_text = f"–ó–∞–ø–∏—Å—å {i+1}:\n"
            for j, value in enumerate(values):
                if j < len(headers):
                    row_text += f"- {headers[j]}: {value}\n"
                else:
                    row_text += f"- –ó–Ω–∞—á–µ–Ω–∏–µ {j+1}: {value}\n"
            result.append(row_text)

        return "\n".join(result)

    def _process_pdf(self, file_bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤"""
        try:
            import io
            import PyPDF2

            pdf_file = io.BytesIO(file_bytes)
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            text = ""

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                page_text = page.extract_text()
                if page_text:
                    text += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ---\n{page_text}\n"

            if not text.strip():
                return "PDF –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."
            return text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞: {str(e)}"

    def _process_docx(self, file_bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DOCX —Ñ–∞–π–ª–æ–≤"""
        try:
            import io
            import docx

            docx_file = io.BytesIO(file_bytes)
            doc = docx.Document(docx_file)
            text = []

            for para in doc.paragraphs:
                if para.text.strip():
                    text.append(para.text)

            return "\n".join(text)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DOCX —Ñ–∞–π–ª–∞: {str(e)}"

    def process_file(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            extension = self._get_file_extension(file_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç
            if extension not in self.supported_formats:
                supported = ", ".join(self.supported_formats.keys())
                raise ValueError(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {extension} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {supported}")

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as f:
                file_bytes = f.read()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ {extension}...")
            text = self.supported_formats[extension](file_bytes)
            print(f"–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞.")

            return text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return None

class KnowledgeBaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        self.config_manager = ConfigManager()
        self.document_processor = DocumentProcessor()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.chunk_size = self.config_manager.get_setting("settings", "chunk_size", 1024)
        self.chunk_overlap = self.config_manager.get_setting("settings", "chunk_overlap", 200)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.kb_dir = os.path.join(DATA_DIR, "knowledge_base")
        os.makedirs(self.kb_dir, exist_ok=True)

    def load_knowledge_base(self, file_path=None):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.

        Args:
            file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π

        Returns:
            str: –¢–µ–∫—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        """
        # –§–∞–π–ª –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        kb_file = os.path.join(self.kb_dir, "cybersecurity_kb.txt")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if file_path:
            try:
                kb_text = self.document_processor.process_file(file_path)
                if kb_text:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    with open(kb_file, 'w', encoding='utf-8') as f:
                        f.write(kb_text)
                    print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {kb_file}")
                    return kb_text
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π.")
                    return self._generate_demo_knowledge_base()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}")
                return self._generate_demo_knowledge_base()

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –±–∞–∑—ã
        if os.path.exists(kb_file):
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {kb_file}")

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            use_existing = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π? (y/n): ").lower().strip() == 'y'

            if use_existing:
                with open(kb_file, 'r', encoding='utf-8') as f:
                    kb_text = f.read()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(kb_text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞.")
                return kb_text

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        print("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        use_demo = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π? (y/n): ").lower().strip() == 'y'

        if use_demo:
            return self._generate_demo_knowledge_base()
        else:
            raise ValueError("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.")

    def _generate_demo_knowledge_base(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

        Returns:
            str: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        demo_kb = """
# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

## –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–∏—Å—Ç–µ–º—ã. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏.

### –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:

1. **–ü–∞—Ä–æ–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è** - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ "–∑–Ω–∞–Ω–∏–∏ —á–µ–≥–æ-—Ç–æ" (–ø–∞—Ä–æ–ª—è). –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω, –Ω–æ –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.

2. **–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA)** - –ø–æ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±—É—è –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞:
   - –¢–æ, —á—Ç–æ –≤—ã –∑–Ω–∞–µ—Ç–µ (–ø–∞—Ä–æ–ª—å)
   - –¢–æ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å (—Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMS –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
   - –¢–æ, —á–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å (–±–∏–æ–º–µ—Ç—Ä–∏—è)

3. **–ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (MFA)** - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—Ä–∏ –∏ –±–æ–ª–µ–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

4. **–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è** - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
   - –û—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤
   - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç—á–∞—Ç–∫–∏ –≥–ª–∞–∑–∞
   - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞
   - –ì–æ–ª–æ—Å–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

5. **–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ —Ç–æ–∫–µ–Ω—ã** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.

### –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:

- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π (–Ω–µ –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –±—É–∫–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
- –†–µ–≥—É–ª—è—Ä–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π
- –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (SSO) –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        kb_file = os.path.join(self.kb_dir, "cybersecurity_kb.txt")
        with open(kb_file, 'w', encoding='utf-8') as f:
            f.write(demo_kb)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ({len(demo_kb)} —Å–∏–º–≤–æ–ª–æ–≤).")
        return demo_kb

    def split_text_into_chunks(self, text):
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º

        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è

        Returns:
            list: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—á–∞–Ω–∫–æ–≤)
        """
        print(f"üîÑ –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏ (—Ä–∞–∑–º–µ—Ä={self.chunk_size}, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ={self.chunk_overlap})...")

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–±–∏–≤–∞—Ç–µ–ª—å —Ç–µ–∫—Å—Ç–∞
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=self.chunk_size,
            chunk_overlap=self.chunk_overlap,
            length_function=len,
            separators=["\n\n", "\n", " ", ""]
        )

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏
        chunks = text_splitter.split_text(text)

        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        documents = []
        for i, chunk in enumerate(chunks):
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π –≤ —á–∞–Ω–∫–µ
            headers = re.findall(r'#+\s+(.+?)(?=\n|$)', chunk)
            categories = []

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            for header in headers:
                header_lower = header.lower()
                if "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü" in header_lower or "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü" in header_lower:
                    categories.append("–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                elif "—à–∏—Ñ—Ä–æ–≤–∞–Ω" in header_lower:
                    categories.append("—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
                elif "—Å–µ—Ç" in header_lower or "—ç–∫—Ä–∞–Ω" in header_lower or "ddos" in header_lower:
                    categories.append("—Å–µ—Ç–µ–≤–∞—è_–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
                elif "—Ñ–∏—à–∏–Ω–≥" in header_lower or "—Å–æ—Ü–∏–∞–ª—å–Ω" in header_lower or "—É–≥—Ä–æ–∑" in header_lower:
                    categories.append("—É–≥—Ä–æ–∑—ã")
                elif "–≤—Ä–µ–¥–æ–Ω–æ—Å" in header_lower or "–∑–∞—â–∏—Ç" in header_lower:
                    categories.append("–∑–∞—â–∏—Ç–∞")

            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–æ–±—â–µ–µ"
            if not categories:
                categories = ["–æ–±—â–µ–µ"]

            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            doc = Document(
                page_content=chunk,
                metadata={
                    "chunk_id": i + 1,
                    "source": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "categories": categories,
                    "length": len(chunk)
                }
            )
            documents.append(doc)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(documents)} —á–∞–Ω–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return documents

    def process_knowledge_base(self, file_path=None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π

        Args:
            file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            tuple: (loaded_text, documents)
        """
        print("=" * 80)
        print("üöÄ –ü–†–û–¶–ï–°–° –ó–ê–ì–†–£–ó–ö–ò –ò –ü–û–î–ì–û–¢–û–í–ö–ò –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô –ü–û –ö–ò–ë–ï–†–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 80)

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        kb_text = self.load_knowledge_base(file_path)
        if not kb_text:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
            return None, None

        # 2. –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏
        documents = self.split_text_into_chunks(kb_text)
        if not documents:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏.")
            return kb_text, None

        print("\n" + "=" * 80)
        print("‚úÖ –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù–ê –ò –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ê")
        print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(kb_text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
        print(f"üìë –°–æ–∑–¥–∞–Ω–æ: {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("=" * 80)

        return kb_text, documents
