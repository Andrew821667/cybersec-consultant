# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import time
from datetime import datetime

from cybersec_consultant.config import ConfigManager
from cybersec_consultant.knowledge_base import KnowledgeBaseManager
from cybersec_consultant.embeddings import VectorSearchManager
from cybersec_consultant.hybrid_search import HybridSearchManager
from cybersec_consultant.llm_interface import LLMInterface
from cybersec_consultant.prompt_management import PromptManager
from cybersec_consultant.state_management import STATE
from cybersec_consultant.context_manager import ContextManager
from cybersec_consultant.knowledge_enrichment import get_enrichment_manager
from cybersec_consultant.user_profiles import get_profile_manager
from cybersec_consultant.external_services import ExternalServicesManager


class CybersecurityConsultant:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.config_manager = ConfigManager()
        self.kb_manager = KnowledgeBaseManager()
        self.vector_search = VectorSearchManager()
        self.hybrid_search = HybridSearchManager()
        self.llm_interface = LLMInterface()
        self.prompt_manager = PromptManager()
        self.context_manager = ContextManager()
        
        # –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
        self.enrichment_manager = get_enrichment_manager()
        self.profile_manager = get_profile_manager()
        self.external_services = ExternalServicesManager()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.use_hybrid_search = self.config_manager.get_setting("settings", "use_hybrid_search", True)
        
        print("ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def initialize_knowledge_base(self, file_path=None, force_reindex=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ —Å–æ–∑–¥–∞–µ—Ç/–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã

        Args:
            file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            force_reindex (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            kb_text, documents = self.kb_manager.process_knowledge_base(file_path)
            if not kb_text or not documents:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
                return False

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∏–Ω–¥–µ–∫—Å–∞
            index_name = "cybersec_index"
            index_path = os.path.join("indices", index_name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å
            if os.path.exists(index_path) and not force_reindex:
                print(f"üìÅ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å: {index_path}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                if self.use_hybrid_search:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    self.hybrid_search.load_indexes(index_name)
                else:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    self.vector_search.load_index(index_name)
            else:
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
                print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
                
                if self.use_hybrid_search:
                    # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    self.hybrid_search.create_indexes(documents, index_name)
                else:
                    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    self.vector_search.create_index(documents, index_name)

            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}")
            return False

    def search_knowledge_base(self, query, k=3, use_cache=True):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π

        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            use_cache (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ [(doc, score), ...]
        """
        if self.use_hybrid_search:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
            return self.hybrid_search.hybrid_search(query, k, use_cache)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            return self.vector_search.search_documents_with_score(query, k, use_cache)

    def process_user_query(self, user_query, context=None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç

        Args:
            user_query (str): –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context (str): –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            str: –û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        """
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: '{user_query}'")

        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = time.time()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            if user_query.startswith("!cve "):
                cve_id = user_query[5:].strip()
                return self.get_cve_info(cve_id)
            elif user_query.startswith("!mitre "):
                query = user_query[7:].strip()
                return self.search_mitre(query)
            elif user_query.startswith("!threat "):
                query = user_query[8:].strip()
                return self.get_threat_info(query)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            search_results = self.search_knowledge_base(user_query)
            if not search_results:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç
            context_documents = []
            for doc, score in search_results:
                context_documents.append(f"--- –î–æ–∫—É–º–µ–Ω—Ç (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f}) ---\n{doc.page_content}\n")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            if context:
                full_context = self.context_manager.update_context(user_query, context)
            else:
                full_context = self.context_manager.update_context(user_query)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            profile = self.profile_manager.get_profile()
            profile_prompt_mod = self.profile_manager.generate_profile_prompt_modification()

            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –ø—Ä–æ—Ñ–∏–ª–µ–º
            prompt = self.prompt_manager.create_consultant_prompt(
                user_query=user_query,
                context_documents="\n".join(context_documents),
                dialogue_context=full_context,
                profile_customization=profile_prompt_mod  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
            )

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            response = self.llm_interface.generate_text(prompt)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –æ—Ç–≤–µ—Ç–æ–º
            self.context_manager.update_context(response, is_user=False)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = time.time() - start_time
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫.")

            return response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

    def toggle_hybrid_search(self, enabled=None):
        """
        –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
        
        Args:
            enabled (bool): –í–∫–ª—é—á–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ None, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
            
        Returns:
            bool: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        """
        if enabled is None:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            enabled = not self.use_hybrid_search
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.use_hybrid_search = enabled
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        self.config_manager.set_setting("settings", "use_hybrid_search", enabled)
        
        if enabled:
            print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –í–ö–õ–Æ–ß–ï–ù (BM25 + –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫)")
        else:
            print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –í–´–ö–õ–Æ–ß–ï–ù (—Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫)")
            
        return enabled
        
    def adjust_hybrid_weight(self, weight):
        """
        –†–µ–≥—É–ª–∏—Ä—É–µ—Ç –≤–µ—Å —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        
        Args:
            weight (float): –í–µ—Å (0-1), –≥–¥–µ 0 = —Ç–æ–ª—å–∫–æ BM25, 1 = —Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            
        Returns:
            float: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤–µ—Å
        """
        if not self.use_hybrid_search:
            print("‚ö†Ô∏è –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ toggle_hybrid_search(True)")
            return None
            
        return self.hybrid_search.adjust_weight(weight)

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    def enrich_knowledge_base(self, force_update=False):
        """
        –û–±–æ–≥–∞—â–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            force_update (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
        Returns:
            tuple: (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        print("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        success, message = self.enrichment_manager.enrich_knowledge_base(force_update)
        
        if success:
            # –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏
            documents = self.kb_manager.split_text_into_chunks(STATE.knowledge_base_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            index_name = "cybersec_index"
            if self.use_hybrid_search:
                # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                self.hybrid_search.create_indexes(documents, index_name)
            else:
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                self.vector_search.create_index(documents, index_name)
                
            print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        return success, message
        
    def start_auto_enrichment(self, interval_hours=None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        
        Args:
            interval_hours (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
        """
        return self.enrichment_manager.start_auto_update(interval_hours)
        
    def stop_auto_enrichment(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        return self.enrichment_manager.stop_auto_update()

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    def set_user_profile(self, profile_id):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            profile_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        success = self.profile_manager.set_current_profile(profile_id)
        
        if success:
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile_id}")
            
        return success
        
    def get_available_profiles(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        """
        return self.profile_manager.profiles
        
    def create_custom_profile(self, profile_id, profile_config):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        
        Args:
            profile_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è
            profile_config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        return self.profile_manager.add_custom_profile(profile_id, profile_config)

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    def get_cve_info(self, cve_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CVE —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        
        Args:
            cve_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä CVE
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        """
        print(f"üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CVE: {cve_id}...")
        cve_data = self.external_services.get_cve_info(cve_id)
        
        if "error" in cve_data:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {cve_id}: {cve_data['error']}"
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        result = f"## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏ {cve_data['id']}\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        result += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {cve_data['description']}\n\n"
        
        # CVSS –æ—Ü–µ–Ω–∫–∞
        if cve_data.get('score'):
            severity = cve_data.get('severity', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            result += f"**–û—Ü–µ–Ω–∫–∞ CVSS:** {cve_data['score']} ({severity})\n"
            
            if cve_data.get('vector'):
                result += f"**–í–µ–∫—Ç–æ—Ä CVSS:** `{cve_data['vector']}`\n"
                
        # –î–∞—Ç—ã
        if cve_data.get('published'):
            result += f"**–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:** {cve_data['published']}\n"
        if cve_data.get('last_modified'):
            result += f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {cve_data['last_modified']}\n"
            
        # –°—Å—ã–ª–∫–∏
        if cve_data.get('references'):
            result += "\n**–°—Å—ã–ª–∫–∏:**\n"
            for ref in cve_data['references'][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å—Å—ã–ª–æ–∫
                result += f"- {ref['url']}\n"
                
        result += f"\n**–ü–æ–¥—Ä–æ–±–Ω–µ–µ:** {cve_data['url']}\n"
        
        return result
        
    def search_mitre(self, query):
        """
        –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ MITRE ATT&CK
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        print(f"üîç –ü–æ–∏—Å–∫ –≤ MITRE ATT&CK: {query}...")
        mitre_data = self.external_services.query_mitre_att_ck(query)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        result = f"## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ MITRE ATT&CK: '{query}'\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        has_data = False
        for section, items in mitre_data.items():
            if items:
                has_data = True
                break
                
        if not has_data:
            return f"{result}–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'."
            
        # –¢–∞–∫—Ç–∏–∫–∏
        if mitre_data.get('tactics'):
            result += "### –¢–∞–∫—Ç–∏–∫–∏\n\n"
            for tactic in mitre_data['tactics'][:3]:
                name = tactic.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                name_ru = tactic.get('name_ru', '')
                if name_ru:
                    name += f" ({name_ru})"
                    
                result += f"**{name}**\n"
                
                if tactic.get('description'):
                    result += f"{tactic['description'][:200]}...\n\n"
                    
        # –¢–µ—Ö–Ω–∏–∫–∏
        if mitre_data.get('techniques'):
            result += "### –¢–µ—Ö–Ω–∏–∫–∏\n\n"
            for technique in mitre_data['techniques'][:3]:
                # –ò—â–µ–º ID —Ç–µ—Ö–Ω–∏–∫–∏
                technique_id = "Unknown"
                for ref in technique.get('external_references', []):
                    if ref.get('source_name') == 'mitre-attack':
                        technique_id = ref.get('external_id', 'Unknown')
                        break
                        
                result += f"**{technique.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({technique_id})**\n"
                
                if technique.get('description'):
                    result += f"{technique['description'][:200]}...\n\n"
                    
        # –ì—Ä—É–ø–ø—ã
        if mitre_data.get('groups'):
            result += "### –ì—Ä—É–ø–ø—ã —É–≥—Ä–æ–∑\n\n"
            for group in mitre_data['groups'][:3]:
                # –ò—â–µ–º ID –≥—Ä—É–ø–ø—ã
                group_id = "Unknown"
                for ref in group.get('external_references', []):
                    if ref.get('source_name') == 'mitre-attack':
                        group_id = ref.get('external_id', 'Unknown')
                        break
                        
                result += f"**{group.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({group_id})**\n"
                
                if group.get('description'):
                    result += f"{group['description'][:200]}...\n\n"
                    
                if group.get('aliases'):
                    result += f"*–¢–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫: {', '.join(group['aliases'])}*\n\n"
                    
        # –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
        if mitre_data.get('software'):
            result += "### –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n\n"
            for sw in mitre_data['software'][:3]:
                # –ò—â–µ–º ID –ü–û
                sw_id = "Unknown"
                for ref in sw.get('external_references', []):
                    if ref.get('source_name') == 'mitre-attack':
                        sw_id = ref.get('external_id', 'Unknown')
                        break
                        
                sw_type = "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û" if sw.get('type') == 'malware' else "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
                result += f"**{sw.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({sw_id})** - {sw_type}\n"
                
                if sw.get('description'):
                    result += f"{sw['description'][:200]}...\n\n"
                    
                if sw.get('aliases'):
                    result += f"*–¢–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫: {', '.join(sw['aliases'])}*\n\n"
                    
        result += "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
        
        return result
        
    def get_threat_info(self, query):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≥—Ä–æ–∑–∞—Ö
        
        Args:
            query (str): –ó–∞–ø—Ä–æ—Å (IP, –¥–æ–º–µ–Ω, —Ö—ç—à –∏ —Ç.–¥.)
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–≥—Ä–æ–∑–µ
        """
        print(f"üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–≥—Ä–æ–∑–µ: {query}...")
        threat_data = self.external_services.get_threat_intelligence(query)
        
        if not threat_data.get('found', False):
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}"
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        query_type = threat_data.get('query_type', 'unknown')
        data = threat_data.get('data', {})
        
        result = f"## –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑: {query}\n\n"
        
        # IP –∞–¥—Ä–µ—Å
        if query_type == 'ip':
            result += f"**–¢–∏–ø:** IP-–∞–¥—Ä–µ—Å\n"
            
            # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
            if 'geolocation' in data:
                geo = data['geolocation']
                country = geo.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                city = geo.get('city', '')
                org = geo.get('org', '')
                
                result += f"**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {country}"
                if city:
                    result += f", {city}"
                result += "\n"
                
                if org:
                    result += f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {org}\n"
                    
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–≥—Ä–æ–∑–∞—Ö
            if 'abuseipdb' in data:
                abuse = data['abuseipdb']
                score = abuse.get('abuse_confidence_score')
                
                if score is not None:
                    result += f"**–û—Ü–µ–Ω–∫–∞ —É–≥—Ä–æ–∑—ã:** {score}%\n"
                    
                reports = abuse.get('total_reports')
                if reports:
                    result += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤:** {reports}\n"
                    
                status = data.get('threat_status')
                if status:
                    result += f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
                    
        # –î–æ–º–µ–Ω
        elif query_type == 'domain':
            result += f"**–¢–∏–ø:** –î–æ–º–µ–Ω\n"
            
            # IP –∞–¥—Ä–µ—Å
            if 'ip' in data:
                result += f"**IP-–∞–¥—Ä–µ—Å:** {data['ip']}\n"
                
            # WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if 'whois' in data:
                whois = data['whois']
                result += "\n### WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                
                if 'registrar' in whois:
                    result += f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {whois['registrar']}\n"
                    
                if 'creation_date' in whois:
                    result += f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {whois['creation_date']}\n"
                    
                if 'expiration_date' in whois:
                    result += f"**–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:** {whois['expiration_date']}\n"
                    
            # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            if 'ssl_certificate' in data:
                ssl = data['ssl_certificate']
                result += "\n### SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n\n"
                
                if 'issued_to' in ssl:
                    result += f"**–í—ã–¥–∞–Ω –¥–ª—è:** {ssl['issued_to']}\n"
                    
                if 'issued_by' in ssl:
                    result += f"**–í—ã–¥–∞–Ω:** {ssl['issued_by']}\n"
                    
                if 'valid_from' in ssl and 'valid_until' in ssl:
                    result += f"**–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:** —Å {ssl['valid_from']} –ø–æ {ssl['valid_until']}\n"
                    
                if 'is_valid' in ssl:
                    status = "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" if ssl['is_valid'] else "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
                    result += f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
                    
        # –•—ç—à —Ñ–∞–π–ª–∞
        elif query_type in ['hash_md5', 'hash_sha1', 'hash_sha256']:
            hash_type = query_type.replace('hash_', '').upper()
            result += f"**–¢–∏–ø:** –•—ç—à —Ñ–∞–π–ª–∞ ({hash_type})\n"
            
            # VirusTotal –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if 'virustotal' in data:
                vt = data['virustotal']
                result += "\n### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ VirusTotal\n\n"
                
                if 'meaningful_name' in vt:
                    result += f"**–ò–º—è —Ñ–∞–π–ª–∞:** {vt['meaningful_name']}\n"
                    
                if 'type_description' in vt:
                    result += f"**–¢–∏–ø —Ñ–∞–π–ª–∞:** {vt['type_description']}\n"
                    
                if 'size' in vt:
                    result += f"**–†–∞–∑–º–µ—Ä:** {vt['size']} –±–∞–π—Ç\n"
                    
                if 'last_analysis_stats' in vt:
                    stats = vt['last_analysis_stats']
                    result += f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**\n"
                    result += f"- –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π: {stats.get('malicious', 0)}\n"
                    result += f"- –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {stats.get('suspicious', 0)}\n"
                    result += f"- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π: {stats.get('harmless', 0)}\n"
                    
                status = data.get('threat_status')
                if status:
                    result += f"\n**–°—Ç–∞—Ç—É—Å:** {status}\n"
                    
        # URL
        elif query_type == 'url':
            result += f"**–¢–∏–ø:** URL\n"
            
            # –ê–Ω–∞–ª–∏–∑ URL
            if 'url_analysis' in data:
                url_data = data['url_analysis']
                result += f"**–°—Ö–µ–º–∞:** {url_data.get('scheme', '')}\n"
                result += f"**–î–æ–º–µ–Ω:** {url_data.get('domain', '')}\n"
                
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if 'safebrowsing' in data:
                sb = data['safebrowsing']
                threats = sb.get('threats', [])
                
                if threats:
                    result += "\n### –£–≥—Ä–æ–∑—ã –≤ Google Safe Browsing\n\n"
                    for threat in threats:
                        result += f"- {threat.get('threatType', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É–≥—Ä–æ–∑–∞')}\n"
                else:
                    result += "\n**Google Safe Browsing:** –£–≥—Ä–æ–∑—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã\n"
                    
            status = data.get('threat_status')
            if status:
                result += f"\n**–°—Ç–∞—Ç—É—Å:** {status}\n"
                
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        else:
            result += f"**–¢–∏–ø:** –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n\n"
            
            # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if 'indicators' in data:
                indicators = data['indicators']
                has_indicators = False
                
                for ind_type, values in indicators.items():
                    if values:
                        has_indicators = True
                        break
                        
                if has_indicators:
                    result += "### –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã\n\n"
                    
                    if indicators.get('ips'):
                        result += f"**IP-–∞–¥—Ä–µ—Å–∞:** {', '.join(indicators['ips'][:5])}"
                        if len(indicators['ips']) > 5:
                            result += f" –∏ –µ—â–µ {len(indicators['ips']) - 5}"
                        result += "\n"
                        
                    if indicators.get('domains'):
                        result += f"**–î–æ–º–µ–Ω—ã:** {', '.join(indicators['domains'][:5])}"
                        if len(indicators['domains']) > 5:
                            result += f" –∏ –µ—â–µ {len(indicators['domains']) - 5}"
                        result += "\n"
                        
                    if indicators.get('urls'):
                        result += f"**URL:** {', '.join(indicators['urls'][:3])}"
                        if len(indicators['urls']) > 3:
                            result += f" –∏ –µ—â–µ {len(indicators['urls']) - 3}"
                        result += "\n"
                        
                    hash_types = []
                    for h_type in ['md5', 'sha1', 'sha256']:
                        if indicators.get(h_type):
                            hash_types.append(f"{h_type.upper()}: {indicators[h_type][0]}")
                            
                    if hash_types:
                        result += f"**–•—ç—à–∏:** {', '.join(hash_types)}\n"
                        
        return result

    def run_interactive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        print("\n" + "=" * 80)
        print("ü§ñ –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢ –ü–û –ö–ò–ë–ï–†–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 80)
        print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit'.")
        print("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  !profile <id> - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  !profiles - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏")
        print("  !enrich - –û–±–æ–≥–∞—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print("  !cve <id> - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CVE")
        print("  !mitre <query> - –ü–æ–∏—Å–∫ –≤ MITRE ATT&CK")
        print("  !threat <query> - –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑ (IP, –¥–æ–º–µ–Ω, —Ö—ç—à –∏ —Ç.–¥.)")
        print("  !hybrid [on|off|weight <value>] - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–∏—Å–∫–æ–º")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        if not STATE.vector_db:
            self.initialize_knowledge_base()

        context = ""
        while True:
            print("\n" + "-" * 40)
            user_query = input("üë§ –í–∞—à –∑–∞–ø—Ä–æ—Å: ")
            
            if user_query.lower() in ["exit", "quit", "–≤—ã—Ö–æ–¥"]:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if user_query.startswith("!hybrid"):
                parts = user_query.split()
                if len(parts) > 1:
                    if parts[1] == "on":
                        self.toggle_hybrid_search(True)
                    elif parts[1] == "off":
                        self.toggle_hybrid_search(False)
                    elif parts[1] == "weight" and len(parts) > 2:
                        try:
                            weight = float(parts[2])
                            self.adjust_hybrid_weight(weight)
                        except ValueError:
                            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1.")
                else:
                    current_state = "–í–ö–õ–Æ–ß–ï–ù" if self.use_hybrid_search else "–í–´–ö–õ–Æ–ß–ï–ù"
                    print(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {current_state}")
                    if self.use_hybrid_search:
                        print(f"‚ÑπÔ∏è –í–µ—Å –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {STATE.hybrid_weight:.2f} (0 = —Ç–æ–ª—å–∫–æ BM25, 1 = —Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π)")
                    print("–ö–æ–º–∞–Ω–¥—ã:")
                    print("  !hybrid on - –í–∫–ª—é—á–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫")
                    print("  !hybrid off - –í—ã–∫–ª—é—á–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫")
                    print("  !hybrid weight 0.7 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (0-1)")
                continue
                
            # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
            elif user_query.startswith("!profile "):
                profile_id = user_query[9:].strip()
                success = self.set_user_profile(profile_id)
                if success:
                    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{profile_id}'")
                else:
                    print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    profiles = list(self.get_available_profiles().keys())
                    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {', '.join(profiles)}")
                continue
                
            elif user_query == "!profiles":
                profiles = self.get_available_profiles()
                print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
                for profile_id, profile in profiles.items():
                    print(f"  - {profile_id}: {profile.get('name')} ({profile.get('description')})")
                continue
                
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            elif user_query == "!enrich":
                print("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
                success, message = self.enrich_knowledge_base(force_update=True)
                status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
                print(f"{status}: {message}")
                continue
                
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
            elif user_query.startswith("!cve ") or user_query.startswith("!mitre ") or user_query.startswith("!threat "):
                # –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ process_user_query
                response = self.process_user_query(user_query)
                print("\nü§ñ –û—Ç–≤–µ—Ç:")
                print(response)
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            response = self.process_user_query(user_query, context)
            
            print("\nü§ñ –û—Ç–≤–µ—Ç:")
            print(response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            context = f"{context}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_query}\n–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {response}"
