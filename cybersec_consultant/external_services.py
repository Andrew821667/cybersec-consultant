# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
MITRE ATT&CK, CVE –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã
"""

import os
import time
import json
import hashlib
import logging
import requests
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Tuple, Union
import concurrent.futures
from tqdm.auto import tqdm

from cybersec_consultant.config import ConfigManager, DATA_DIR
from cybersec_consultant.state_management import STATE
from cybersec_consultant.error_handling import handle_api_errors, retry

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class ExternalServicesManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.config_manager = ConfigManager()
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.cache_dir = os.path.join(DATA_DIR, "external_services_cache")
        os.makedirs(self.cache_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cache_ttl = self.config_manager.get_setting(
            "external_services", "cache_ttl_hours", 24
        )  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —á–∞—Å–∞—Ö
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.mitre_service = MitreAttackService(self.cache_dir, self.cache_ttl)
        self.cve_service = CVEService(self.cache_dir, self.cache_ttl)
        self.osint_service = OSINTService(self.cache_dir, self.cache_ttl)

    def refresh_all_caches(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        
        Returns:
            Dict[str, bool]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        """
        results = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # MITRE ATT&CK
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ MITRE ATT&CK...")
        try:
            success = self.mitre_service.refresh_cache()
            results["mitre_attack"] = success
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
            print(f"{status} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MITRE ATT&CK")
        except Exception as e:
            results["mitre_attack"] = False
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MITRE ATT&CK: {str(e)}")
            
        # CVE
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã CVE...")
        try:
            success = self.cve_service.refresh_cache()
            results["cve"] = success
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
            print(f"{status} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE")
        except Exception as e:
            results["cve"] = False
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE: {str(e)}")
            
        # OSINT
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö OSINT...")
        try:
            success = self.osint_service.refresh_cache()
            results["osint"] = success
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
            print(f"{status} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö OSINT")
        except Exception as e:
            results["osint"] = False
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö OSINT: {str(e)}")
            
        return results
        
    def query_mitre_att_ck(self, query: str) -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ MITRE ATT&CK
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–µ—Ö–Ω–∏–∫–∞, —Ç–∞–∫—Ç–∏–∫–∞, –≥—Ä—É–ø–ø–∞ –∏ —Ç.–¥.)
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        return self.mitre_service.search(query)
        
    def get_cve_info(self, cve_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏ CVE
        
        Args:
            cve_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä CVE (–Ω–∞–ø—Ä–∏–º–µ—Ä, CVE-2021-44228)
            
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        """
        return self.cve_service.get_cve(cve_id)
        
    def search_cve(self, query: str, limit: int = 10) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π CVE –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        """
        return self.cve_service.search(query, limit)
        
    def get_threat_intelligence(self, query: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Threat Intelligence –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (IP, –¥–æ–º–µ–Ω, —Ö—ç—à –∏ —Ç.–¥.)
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑
        """
        return self.osint_service.get_threat_intelligence(query)


class MitreAttackService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MITRE ATT&CK - –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –æ —Ç–∞–∫—Ç–∏–∫–∞—Ö, 
    —Ç–µ—Ö–Ω–∏–∫–∞—Ö –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö (TTP) –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑
    """
    
    def __init__(self, cache_dir: str, cache_ttl: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ MITRE ATT&CK
        
        Args:
            cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —á–∞—Å–∞—Ö
        """
        self.cache_dir = cache_dir
        self.cache_ttl = cache_ttl
        
        # –§–∞–π–ª—ã –∫—ç—à–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        self.tactics_cache_file = os.path.join(cache_dir, "mitre_tactics.json")
        self.techniques_cache_file = os.path.join(cache_dir, "mitre_techniques.json")
        self.groups_cache_file = os.path.join(cache_dir, "mitre_groups.json")
        self.software_cache_file = os.path.join(cache_dir, "mitre_software.json")
        
        # STIX/TAXII API MITRE ATT&CK
        self.base_url = "https://raw.githubusercontent.com/mitre/cti/master"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self._load_cache()
    
    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.tactics = {}
        self.techniques = {}
        self.groups = {}
        self.software = {}
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
        def is_cache_valid(cache_file):
            if not os.path.exists(cache_file):
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            file_time = os.path.getmtime(cache_file)
            current_time = time.time()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å TTL
            return (current_time - file_time) / 3600 < self.cache_ttl
            
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞
        def load_cached_data(cache_file, default_value=None):
            try:
                if os.path.exists(cache_file):
                    with open(cache_file, 'r', encoding='utf-8') as f:
                        return json.load(f)
                return default_value or {}
            except Exception as e:
                logger.error(f"Error loading cache from {cache_file}: {str(e)}")
                return default_value or {}
                
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        cache_files = [
            (self.tactics_cache_file, "tactics"),
            (self.techniques_cache_file, "techniques"),
            (self.groups_cache_file, "groups"),
            (self.software_cache_file, "software")
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–µ–π
        all_valid = True
        for cache_file, _ in cache_files:
            if not is_cache_valid(cache_file):
                all_valid = False
                break
                
        # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ
        if not all_valid:
            logger.info("MITRE ATT&CK cache is outdated, refreshing...")
            self.refresh_cache()
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            self.tactics = load_cached_data(self.tactics_cache_file)
            self.techniques = load_cached_data(self.techniques_cache_file)
            self.groups = load_cached_data(self.groups_cache_file)
            self.software = load_cached_data(self.software_cache_file)
            
            logger.info(f"Loaded MITRE ATT&CK cache: {len(self.tactics)} tactics, {len(self.techniques)} techniques, {len(self.groups)} groups, {len(self.software)} software")
    
    @retry(attempts=3, delay=2)
    def _fetch_mitre_data(self, data_type: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ MITRE ATT&CK –ø–æ —Ç–∏–ø—É
        
        Args:
            data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö (enterprise-attack, mobile-attack, ics-attack)
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ MITRE ATT&CK
        """
        url = f"{self.base_url}/{data_type}/{data_type}.json"
        
        logger.info(f"Fetching MITRE ATT&CK data from {url}")
        response = requests.get(url)
        response.raise_for_status()
        
        return response.json()
    
    def refresh_cache(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–∞–Ω–Ω—ã—Ö MITRE ATT&CK
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            enterprise_data = self._fetch_mitre_data("enterprise-attack")
            # mobile_data = self._fetch_mitre_data("mobile-attack")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # ics_data = self._fetch_mitre_data("ics-attack")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ enterprise)
            all_objects = enterprise_data.get("objects", [])
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
            tactics = {}
            techniques = {}
            groups = {}
            software = {}
            
            for obj in all_objects:
                obj_type = obj.get("type")
                obj_id = obj.get("id")
                
                if not obj_id:
                    continue
                    
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–∑–æ–≤—ã—Ö —Ç–∞–∫—Ç–∏–∫)
                name_ru = None
                name = obj.get("name", "")
                
                # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∞–∫—Ç–∏–∫
                translations = {
                    "Reconnaissance": "–†–∞–∑–≤–µ–¥–∫–∞",
                    "Resource Development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤",
                    "Initial Access": "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø",
                    "Execution": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    "Persistence": "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ",
                    "Privilege Escalation": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π",
                    "Defense Evasion": "–û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã",
                    "Credential Access": "–î–æ—Å—Ç—É–ø –∫ —É—á–µ—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º",
                    "Discovery": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
                    "Lateral Movement": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                    "Collection": "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö",
                    "Command and Control": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å",
                    "Exfiltration": "–≠–∫—Å—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è",
                    "Impact": "–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ",
                }
                
                if name in translations:
                    name_ru = translations[name]
                
                # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
                if obj_type == "x-mitre-tactic":
                    # –≠—Ç–æ —Ç–∞–∫—Ç–∏–∫–∞
                    tactics[obj_id] = {
                        "id": obj_id,
                        "name": name,
                        "name_ru": name_ru,
                        "description": obj.get("description", ""),
                        "external_references": obj.get("external_references", [])
                    }
                elif obj_type == "attack-pattern":
                    # –≠—Ç–æ —Ç–µ—Ö–Ω–∏–∫–∞
                    kill_chain_phases = obj.get("kill_chain_phases", [])
                    tactics_ids = []
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–∫—Ç–∏–∫–∏
                    for phase in kill_chain_phases:
                        if phase.get("kill_chain_name") == "mitre-attack":
                            tactics_ids.append(phase.get("phase_name"))
                    
                    techniques[obj_id] = {
                        "id": obj_id,
                        "name": name,
                        "description": obj.get("description", ""),
                        "external_references": obj.get("external_references", []),
                        "tactics": tactics_ids,
                        "detection": obj.get("x_mitre_detection", ""),
                        "platforms": obj.get("x_mitre_platforms", [])
                    }
                elif obj_type == "intrusion-set":
                    # –≠—Ç–æ –≥—Ä—É–ø–ø–∞ —É–≥—Ä–æ–∑
                    groups[obj_id] = {
                        "id": obj_id,
                        "name": name,
                        "description": obj.get("description", ""),
                        "external_references": obj.get("external_references", []),
                        "aliases": obj.get("aliases", []),
                        "first_seen": obj.get("first_seen", ""),
                        "last_seen": obj.get("last_seen", "")
                    }
                elif obj_type == "malware" or obj_type == "tool":
                    # –≠—Ç–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                    software[obj_id] = {
                        "id": obj_id,
                        "name": name,
                        "type": obj_type,
                        "description": obj.get("description", ""),
                        "external_references": obj.get("external_references", []),
                        "platforms": obj.get("x_mitre_platforms", []),
                        "aliases": obj.get("aliases", [])
                    }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
            with open(self.tactics_cache_file, 'w', encoding='utf-8') as f:
                json.dump(tactics, f, ensure_ascii=False, indent=2)
                
            with open(self.techniques_cache_file, 'w', encoding='utf-8') as f:
                json.dump(techniques, f, ensure_ascii=False, indent=2)
                
            with open(self.groups_cache_file, 'w', encoding='utf-8') as f:
                json.dump(groups, f, ensure_ascii=False, indent=2)
                
            with open(self.software_cache_file, 'w', encoding='utf-8') as f:
                json.dump(software, f, ensure_ascii=False, indent=2)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –ø–∞–º—è—Ç–∏
            self.tactics = tactics
            self.techniques = techniques
            self.groups = groups
            self.software = software
            
            logger.info(f"Updated MITRE ATT&CK cache: {len(tactics)} tactics, {len(techniques)} techniques, {len(groups)} groups, {len(software)} software")
            
            return True
        except Exception as e:
            logger.error(f"Error refreshing MITRE ATT&CK cache: {str(e)}")
            return False
    
    def search(self, query: str) -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ MITRE ATT&CK
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏, —Ç–∞–∫—Ç–∏–∫–∏, –≥—Ä—É–ø–ø—ã –∏–ª–∏ ID)
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        query = query.lower().strip()
        results = {
            "tactics": [],
            "techniques": [],
            "groups": [],
            "software": []
        }
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, T1234, G0001)
        is_id_query = False
        for prefix in ["t", "g", "s"]:
            if query.startswith(prefix) and len(query) > 1 and query[1:].isdigit():
                is_id_query = True
                break
                
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º
        for tactic_id, tactic in self.tactics.items():
            if is_id_query and tactic_id.lower() == query:
                results["tactics"].append(tactic)
                continue
                
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            name = tactic.get("name", "").lower()
            name_ru = tactic.get("name_ru", "").lower()
            
            if query in name or query in name_ru:
                results["tactics"].append(tactic)
                
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ö–Ω–∏–∫–∞–º
        for technique_id, technique in self.techniques.items():
            if is_id_query:
                # –î–ª—è —Ç–µ—Ö–Ω–∏–∫ ID –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                for ref in technique.get("external_references", []):
                    if ref.get("source_name") == "mitre-attack" and ref.get("external_id", "").lower() == query:
                        results["techniques"].append(technique)
                        break
                continue
                
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            if query in technique.get("name", "").lower() or query in technique.get("description", "").lower():
                results["techniques"].append(technique)
                
        # –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group_id, group in self.groups.items():
            if is_id_query:
                # –î–ª—è –≥—Ä—É–ø–ø ID –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                for ref in group.get("external_references", []):
                    if ref.get("source_name") == "mitre-attack" and ref.get("external_id", "").lower() == query:
                        results["groups"].append(group)
                        break
                continue
                
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ –∞–ª–∏–∞—Å–∞–º
            if query in group.get("name", "").lower() or query in group.get("description", "").lower():
                results["groups"].append(group)
                continue
                
            # –ü–æ–∏—Å–∫ –ø–æ –∞–ª–∏–∞—Å–∞–º
            for alias in group.get("aliases", []):
                if query in alias.lower():
                    results["groups"].append(group)
                    break
                    
        # –ü–æ–∏—Å–∫ –ø–æ –ü–û
        for sw_id, sw in self.software.items():
            if is_id_query:
                # –î–ª—è –ü–û ID –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                for ref in sw.get("external_references", []):
                    if ref.get("source_name") == "mitre-attack" and ref.get("external_id", "").lower() == query:
                        results["software"].append(sw)
                        break
                continue
                
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ –∞–ª–∏–∞—Å–∞–º
            if query in sw.get("name", "").lower() or query in sw.get("description", "").lower():
                results["software"].append(sw)
                continue
                
            # –ü–æ–∏—Å–∫ –ø–æ –∞–ª–∏–∞—Å–∞–º
            for alias in sw.get("aliases", []):
                if query in alias.lower():
                    results["software"].append(sw)
                    break
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for key in results:
            results[key] = results[key][:10]  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            
        return results
        
    def get_tactics(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–∫—Ç–∏–∫
        
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Ç–∞–∫—Ç–∏–∫
        """
        return list(self.tactics.values())
        
    def get_techniques_by_tactic(self, tactic_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–∫—Ç–∏–∫–∏
        
        Args:
            tactic_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–∫—Ç–∏–∫–∏
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫
        """
        result = []
        
        # MITRE ATT&CK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ ID –¥–ª—è —Ç–∞–∫—Ç–∏–∫ –≤ —Å–≤—è–∑—è—Ö
        short_id = None
        
        # –ò—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –≤ external_references
        if tactic_id in self.tactics:
            for ref in self.tactics[tactic_id].get("external_references", []):
                if ref.get("source_name") == "mitre-attack":
                    short_id = ref.get("external_id")
                    break
                    
        if not short_id:
            return []
            
        # –ò—â–µ–º —Ç–µ—Ö–Ω–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Ç–∞–∫—Ç–∏–∫–æ–π
        for technique in self.techniques.values():
            if short_id in technique.get("tactics", []):
                result.append(technique)
                
        return result
        
    def get_technique_details(self, technique_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–µ
        
        Args:
            technique_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∏ (–ø–æ–ª–Ω—ã–π ID –∏–ª–∏ T-–Ω–æ–º–µ—Ä)
            
        Returns:
            Optional[Dict[str, Any]]: –î–µ—Ç–∞–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–ª–Ω—ã–π ID
        if technique_id in self.techniques:
            return self.techniques[technique_id]
            
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω T-–Ω–æ–º–µ—Ä, –∏—â–µ–º –ø–æ external_references
        for tech_id, technique in self.techniques.items():
            for ref in technique.get("external_references", []):
                if ref.get("source_name") == "mitre-attack" and ref.get("external_id") == technique_id:
                    return technique
                    
        return None
        
    def get_group_details(self, group_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ —É–≥—Ä–æ–∑
        
        Args:
            group_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã (–ø–æ–ª–Ω—ã–π ID –∏–ª–∏ G-–Ω–æ–º–µ—Ä)
            
        Returns:
            Optional[Dict[str, Any]]: –î–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–ª–Ω—ã–π ID
        if group_id in self.groups:
            return self.groups[group_id]
            
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω G-–Ω–æ–º–µ—Ä, –∏—â–µ–º –ø–æ external_references
        for g_id, group in self.groups.items():
            for ref in group.get("external_references", []):
                if ref.get("source_name") == "mitre-attack" and ref.get("external_id") == group_id:
                    return group
                    
        return None


class CVEService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π CVE
    """
    
    def __init__(self, cache_dir: str, cache_ttl: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ CVE
        
        Args:
            cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —á–∞—Å–∞—Ö
        """
        self.cache_dir = cache_dir
        self.cache_ttl = cache_ttl
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö CVE
        self.recent_cve_cache_file = os.path.join(cache_dir, "recent_cve.json")
        
        # –ö—ç—à –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö CVE (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ)
        self.cve_cache_dir = os.path.join(cache_dir, "cve_details")
        os.makedirs(self.cve_cache_dir, exist_ok=True)
        
        # API-–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏
        self.nvd_api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._load_cache()
    
    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –Ω–µ–¥–∞–≤–Ω–∏—Ö CVE
        if os.path.exists(self.recent_cve_cache_file):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            file_time = os.path.getmtime(self.recent_cve_cache_file)
            current_time = time.time()
            
            if (current_time - file_time) / 3600 < self.cache_ttl:
                # –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º
                try:
                    with open(self.recent_cve_cache_file, 'r', encoding='utf-8') as f:
                        self.recent_cve = json.load(f)
                    logger.info(f"Loaded recent CVE cache: {len(self.recent_cve)} entries")
                    return
                except Exception as e:
                    logger.error(f"Error loading CVE cache: {str(e)}")
                
        # –ï—Å–ª–∏ –∫—ç—à –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        logger.info("CVE cache is outdated or not found, refreshing...")
        self.refresh_cache()
    
    def _get_cve_cache_file(self, cve_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ CVE
        
        Args:
            cve_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä CVE
            
        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID
        cve_id = cve_id.upper()
        if not cve_id.startswith("CVE-"):
            cve_id = f"CVE-{cve_id}"
            
        # –•—ç—à–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename = hashlib.md5(cve_id.encode()).hexdigest() + ".json"
        return os.path.join(self.cve_cache_dir, filename)
    
    @retry(attempts=3, delay=2)
    def refresh_cache(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–∞–Ω–Ω—ã—Ö CVE –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            thirty_days_ago = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%dT00:00:00.000")
            
            params = {
                "pubStartDate": thirty_days_ago,
                "resultsPerPage": 50  # NVD –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 50 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            }
            
            logger.info(f"Fetching recent CVEs from {self.nvd_api_url}")
            
            response = requests.get(self.nvd_api_url, params=params)
            response.raise_for_status()
            data = response.json()
            
            if "vulnerabilities" not in data:
                logger.warning("No vulnerabilities found in NVD response")
                return False
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            vulnerabilities = data.get("vulnerabilities", [])
            recent_cve = []
            
            for vuln in vulnerabilities:
                cve_item = vuln.get("cve", {})
                cve_id = cve_item.get("id", "Unknown")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                descriptions = cve_item.get("descriptions", [])
                description_en = None
                description_ru = None
                
                for desc in descriptions:
                    if desc.get("lang") == "en":
                        description_en = desc.get("value", "")
                    elif desc.get("lang") == "ru":
                        description_ru = desc.get("value", "")
                
                description = description_ru or description_en or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ CVSS
                metrics = cve_item.get("metrics", {})
                cvss_data = metrics.get("cvssMetricV31", [{}])[0] if "cvssMetricV31" in metrics else None
                
                if not cvss_data:
                    cvss_data = metrics.get("cvssMetricV30", [{}])[0] if "cvssMetricV30" in metrics else None
                    
                if not cvss_data:
                    cvss_data = metrics.get("cvssMetricV2", [{}])[0] if "cvssMetricV2" in metrics else None
                    
                cvss_score = None
                cvss_severity = None
                
                if cvss_data:
                    cvss = cvss_data.get("cvssData", {})
                    cvss_score = cvss.get("baseScore")
                    cvss_severity = cvss.get("baseSeverity")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç
                item = {
                    "id": cve_id,
                    "description": description,
                    "published": cve_item.get("published"),
                    "last_modified": cve_item.get("lastModified"),
                    "score": cvss_score,
                    "severity": cvss_severity,
                    "url": f"https://nvd.nist.gov/vuln/detail/{cve_id}"
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫—ç—à
                cache_file = self._get_cve_cache_file(cve_id)
                with open(cache_file, 'w', encoding='utf-8') as f:
                    json.dump(item, f, ensure_ascii=False, indent=2)
                
                recent_cve.append(item)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.recent_cve = recent_cve
            with open(self.recent_cve_cache_file, 'w', encoding='utf-8') as f:
                json.dump(recent_cve, f, ensure_ascii=False, indent=2)
                
            logger.info(f"Updated recent CVE cache: {len(recent_cve)} entries")
            
            return True
        except Exception as e:
            logger.error(f"Error refreshing CVE cache: {str(e)}")
            self.recent_cve = []
            return False
    
    @retry(attempts=3, delay=1)
    def get_cve(self, cve_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏ CVE
        
        Args:
            cve_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä CVE (–Ω–∞–ø—Ä–∏–º–µ—Ä, CVE-2021-44228)
            
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID
        cve_id = cve_id.upper()
        if not cve_id.startswith("CVE-"):
            cve_id = f"CVE-{cve_id}"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∫—ç—à–µ
        cache_file = self._get_cve_cache_file(cve_id)
        
        if os.path.exists(cache_file):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            file_time = os.path.getmtime(cache_file)
            current_time = time.time()
            
            if (current_time - file_time) / 3600 < self.cache_ttl:
                # –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º
                try:
                    with open(cache_file, 'r', encoding='utf-8') as f:
                        return json.load(f)
                except Exception as e:
                    logger.error(f"Error loading CVE cache for {cve_id}: {str(e)}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –∏–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å NVD
        params = {
            "cveId": cve_id
        }
        
        logger.info(f"Fetching CVE {cve_id} from {self.nvd_api_url}")
        
        response = requests.get(self.nvd_api_url, params=params)
        response.raise_for_status()
        data = response.json()
        
        if "vulnerabilities" not in data or not data["vulnerabilities"]:
            logger.warning(f"CVE {cve_id} not found in NVD")
            return {
                "id": cve_id,
                "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "error": "CVE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ NVD"
            }
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cve_item = data["vulnerabilities"][0].get("cve", {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        descriptions = cve_item.get("descriptions", [])
        description_en = None
        description_ru = None
        
        for desc in descriptions:
            if desc.get("lang") == "en":
                description_en = desc.get("value", "")
            elif desc.get("lang") == "ru":
                description_ru = desc.get("value", "")
        
        description = description_ru or description_en or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ CVSS
        metrics = cve_item.get("metrics", {})
        cvss_data = metrics.get("cvssMetricV31", [{}])[0] if "cvssMetricV31" in metrics else None
        
        if not cvss_data:
            cvss_data = metrics.get("cvssMetricV30", [{}])[0] if "cvssMetricV30" in metrics else None
            
        if not cvss_data:
            cvss_data = metrics.get("cvssMetricV2", [{}])[0] if "cvssMetricV2" in metrics else None
            
        cvss_score = None
        cvss_severity = None
        cvss_vector = None
        
        if cvss_data:
            cvss = cvss_data.get("cvssData", {})
            cvss_score = cvss.get("baseScore")
            cvss_severity = cvss.get("baseSeverity")
            cvss_vector = cvss.get("vectorString")
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏
        references = []
        for ref in cve_item.get("references", []):
            references.append({
                "url": ref.get("url", ""),
                "source": ref.get("source", ""),
                "tags": ref.get("tags", [])
            })
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "id": cve_id,
            "description": description,
            "published": cve_item.get("published"),
            "last_modified": cve_item.get("lastModified"),
            "score": cvss_score,
            "severity": cvss_severity,
            "vector": cvss_vector,
            "references": references,
            "url": f"https://nvd.nist.gov/vuln/detail/{cve_id}"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
            
        return result
    
    def search(self, query: str, limit: int = 10) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π CVE –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        """
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ CVE ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
        if query.upper().startswith("CVE-") or query.upper().startswith("CVE:"):
            cve_id = query.upper().replace("CVE:", "CVE-")
            result = self.get_cve(cve_id)
            return [result] if result.get("error") is None else []
            
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º NVD API
        params = {
            "keywordSearch": query,
            "resultsPerPage": min(limit, 50)  # NVD –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 50 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        }
        
        logger.info(f"Searching for CVEs with query '{query}' from {self.nvd_api_url}")
        
        try:
            response = requests.get(self.nvd_api_url, params=params)
            response.raise_for_status()
            data = response.json()
            
            if "vulnerabilities" not in data or not data["vulnerabilities"]:
                logger.warning(f"No CVEs found for query '{query}'")
                return []
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = []
            
            for vuln in data["vulnerabilities"][:limit]:
                cve_item = vuln.get("cve", {})
                cve_id = cve_item.get("id", "Unknown")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                descriptions = cve_item.get("descriptions", [])
                description_en = None
                description_ru = None
                
                for desc in descriptions:
                    if desc.get("lang") == "en":
                        description_en = desc.get("value", "")
                    elif desc.get("lang") == "ru":
                        description_ru = desc.get("value", "")
                
                description = description_ru or description_en or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ CVSS
                metrics = cve_item.get("metrics", {})
                cvss_data = metrics.get("cvssMetricV31", [{}])[0] if "cvssMetricV31" in metrics else None
                
                if not cvss_data:
                    cvss_data = metrics.get("cvssMetricV30", [{}])[0] if "cvssMetricV30" in metrics else None
                    
                if not cvss_data:
                    cvss_data = metrics.get("cvssMetricV2", [{}])[0] if "cvssMetricV2" in metrics else None
                    
                cvss_score = None
                cvss_severity = None
                
                if cvss_data:
                    cvss = cvss_data.get("cvssData", {})
                    cvss_score = cvss.get("baseScore")
                    cvss_severity = cvss.get("baseSeverity")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç
                item = {
                    "id": cve_id,
                    "description": description,
                    "published": cve_item.get("published"),
                    "last_modified": cve_item.get("lastModified"),
                    "score": cvss_score,
                    "severity": cvss_severity,
                    "url": f"https://nvd.nist.gov/vuln/detail/{cve_id}"
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫—ç—à
                cache_file = self._get_cve_cache_file(cve_id)
                with open(cache_file, 'w', encoding='utf-8') as f:
                    json.dump(item, f, ensure_ascii=False, indent=2)
                    
                results.append(item)
                
            return results
        except Exception as e:
            logger.error(f"Error searching CVEs: {str(e)}")
            return []


class OSINTService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ OSINT (Open Source Intelligence)
    –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, cache_dir: str, cache_ttl: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ OSINT
        
        Args:
            cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —á–∞—Å–∞—Ö
        """
        self.cache_dir = cache_dir
        self.cache_ttl = cache_ttl
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è OSINT –¥–∞–Ω–Ω—ã—Ö
        self.osint_cache_dir = os.path.join(cache_dir, "osint_data")
        os.makedirs(self.osint_cache_dir, exist_ok=True)
        
    def refresh_cache(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–∞–Ω–Ω—ã—Ö OSINT
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        # –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, OSINT –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        return True
    
    def _get_cache_file(self, query_type: str, query: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ OSINT-–∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (ip, domain, hash, etc)
            query: –ó–∞–ø—Ä–æ—Å
            
        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞
        """
        # –•—ç—à–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        key = f"{query_type}_{query}"
        filename = hashlib.md5(key.encode()).hexdigest() + ".json"
        return os.path.join(self.osint_cache_dir, filename)
    
    def _is_cache_valid(self, cache_file: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
        
        Args:
            cache_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω
        """
        if not os.path.exists(cache_file):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        file_time = os.path.getmtime(cache_file)
        current_time = time.time()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å TTL
        return (current_time - file_time) / 3600 < self.cache_ttl
    
    def get_threat_intelligence(self, query: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Threat Intelligence –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (IP, –¥–æ–º–µ–Ω, —Ö—ç—à –∏ —Ç.–¥.)
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑
        """
        query = query.strip()
        query_type = self._detect_query_type(query)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_file = self._get_cache_file(query_type, query)
        
        if self._is_cache_valid(cache_file):
            try:
                with open(cache_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"Error loading OSINT cache: {str(e)}")
                
        # –ï—Å–ª–∏ –∫—ç—à –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = self._get_threat_data(query_type, query)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        try:
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Error saving OSINT cache: {str(e)}")
            
        return result
    
    def _detect_query_type(self, query: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (IP, –¥–æ–º–µ–Ω, —Ö—ç—à –∏ —Ç.–¥.)
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å
            
        Returns:
            str: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        """
        import re
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ IP
        ip_pattern = r"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        if re.match(ip_pattern, query):
            return "ip"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–º–µ–Ω
        domain_pattern = r"^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$"
        if re.match(domain_pattern, query):
            return "domain"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö—ç—à MD5
        if re.match(r"^[a-fA-F0-9]{32}$", query):
            return "hash_md5"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö—ç—à SHA1
        if re.match(r"^[a-fA-F0-9]{40}$", query):
            return "hash_sha1"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö—ç—à SHA256
        if re.match(r"^[a-fA-F0-9]{64}$", query):
            return "hash_sha256"
            
        # URL
        if query.startswith("http://") or query.startswith("https://"):
            return "url"
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        return "text"
    
    def _get_threat_data(self, query_type: str, query: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            query: –ó–∞–ø—Ä–æ—Å
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö
        """
        result = {
            "query": query,
            "query_type": query_type,
            "found": False,
            "data": {}
        }
        
        try:
            if query_type == "ip":
                return self._get_ip_threat_data(query, result)
            elif query_type == "domain":
                return self._get_domain_threat_data(query, result)
            elif query_type in ["hash_md5", "hash_sha1", "hash_sha256"]:
                return self._get_hash_threat_data(query, query_type, result)
            elif query_type == "url":
                return self._get_url_threat_data(query, result)
            else:
                return self._get_text_threat_data(query, result)
        except Exception as e:
            logger.error(f"Error getting threat data for {query_type} {query}: {str(e)}")
            result["error"] = str(e)
            return result
    
    def _get_ip_threat_data(self, ip: str, result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö –¥–ª—è IP-–∞–¥—Ä–µ—Å–∞
        
        Args:
            ip: IP-–∞–¥—Ä–µ—Å
            result: –ë–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API AbuseIPDB –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
        try:
            headers = {
                "Accept": "application/json",
                "Key": os.environ.get("ABUSEIPDB_API_KEY", "")  # API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            }
            
            # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            if not headers["Key"]:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)
                geo_response = requests.get(f"https://ipapi.co/{ip}/json/")
                geo_response.raise_for_status()
                geo_data = geo_response.json()
                
                result["data"]["geolocation"] = {
                    "country": geo_data.get("country_name"),
                    "country_code": geo_data.get("country_code"),
                    "city": geo_data.get("city"),
                    "region": geo_data.get("region"),
                    "org": geo_data.get("org"),
                    "asn": geo_data.get("asn")
                }
                
                result["found"] = True
                return result
                
            # –ï—Å–ª–∏ –∫–ª—é—á —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç AbuseIPDB
            params = {
                "ipAddress": ip,
                "maxAgeInDays": 90,
                "verbose": True
            }
            
            response = requests.get(
                "https://api.abuseipdb.com/api/v2/check",
                headers=headers,
                params=params
            )
            
            if response.status_code == 200:
                abuse_data = response.json().get("data", {})
                
                result["data"]["abuseipdb"] = {
                    "abuse_confidence_score": abuse_data.get("abuseConfidenceScore"),
                    "is_whitelisted": abuse_data.get("isWhitelisted"),
                    "total_reports": abuse_data.get("totalReports"),
                    "last_reported_at": abuse_data.get("lastReportedAt"),
                    "country": abuse_data.get("countryName"),
                    "country_code": abuse_data.get("countryCode"),
                    "isp": abuse_data.get("isp"),
                    "usage_type": abuse_data.get("usageType"),
                    "domain": abuse_data.get("domain")
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≥—Ä–æ–∑—ã
                if abuse_data.get("abuseConfidenceScore", 0) > 50:
                    result["data"]["threat_status"] = "–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥—Ä–æ–∑—ã"
                elif abuse_data.get("abuseConfidenceScore", 0) > 20:
                    result["data"]["threat_status"] = "–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥—Ä–æ–∑—ã"
                else:
                    result["data"]["threat_status"] = "–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥—Ä–æ–∑—ã"
                    
                result["found"] = True
            
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            try:
                geo_response = requests.get(f"https://ipapi.co/{ip}/json/")
                if geo_response.status_code == 200:
                    geo_data = geo_response.json()
                    
                    result["data"]["geolocation"] = {
                        "country": geo_data.get("country_name"),
                        "country_code": geo_data.get("country_code"),
                        "city": geo_data.get("city"),
                        "region": geo_data.get("region"),
                        "org": geo_data.get("org"),
                        "asn": geo_data.get("asn")
                    }
            except Exception:
                pass
                
            return result
        except Exception as e:
            logger.error(f"Error checking IP {ip}: {str(e)}")
            result["error"] = str(e)
            return result
    
    def _get_domain_threat_data(self, domain: str, result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö –¥–ª—è –¥–æ–º–µ–Ω–∞
        
        Args:
            domain: –î–æ–º–µ–Ω
            result: –ë–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º WHOIS –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            import socket
            # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –¥–æ–º–µ–Ω–∞
            try:
                ip = socket.gethostbyname(domain)
                result["data"]["ip"] = ip
                
                # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± IP
                ip_result = self._get_ip_threat_data(ip, {"data": {}})
                if "data" in ip_result and "geolocation" in ip_result["data"]:
                    result["data"]["geolocation"] = ip_result["data"]["geolocation"]
                if "data" in ip_result and "abuseipdb" in ip_result["data"]:
                    result["data"]["ip_threat_info"] = ip_result["data"]["abuseipdb"]
            except:
                pass
                
            # –ü–æ–ª—É—á–∞–µ–º WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try:
                # –ù–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ—ç—Ç–æ–º—É –≤ try/except
                import whois
                domain_info = whois.whois(domain)
                
                result["data"]["whois"] = {
                    "domain_name": domain_info.domain_name,
                    "registrar": domain_info.registrar,
                    "creation_date": str(domain_info.creation_date),
                    "expiration_date": str(domain_info.expiration_date),
                    "updated_date": str(domain_info.updated_date),
                    "name_servers": domain_info.name_servers
                }
                
                result["found"] = True
            except Exception:
                pass
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            try:
                import ssl
                import socket
                from datetime import datetime
                
                context = ssl.create_default_context()
                with socket.create_connection((domain, 443)) as sock:
                    with context.wrap_socket(sock, server_hostname=domain) as ssock:
                        cert = ssock.getpeercert()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
                        issued_to = dict(x[0] for x in cert['subject'])
                        issued_by = dict(x[0] for x in cert['issuer'])
                        
                        # –î–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è
                        not_before = datetime.strptime(cert['notBefore'], '%b %d %H:%M:%S %Y %Z')
                        not_after = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                        
                        result["data"]["ssl_certificate"] = {
                            "issued_to": issued_to.get('commonName'),
                            "issued_by": issued_by.get('commonName'),
                            "valid_from": not_before.strftime('%Y-%m-%d'),
                            "valid_until": not_after.strftime('%Y-%m-%d'),
                            "is_valid": datetime.now() < not_after and datetime.now() > not_before
                        }
            except Exception:
                pass
                
            return result
        except Exception as e:
            logger.error(f"Error checking domain {domain}: {str(e)}")
            result["error"] = str(e)
            return result
    
    def _get_hash_threat_data(self, file_hash: str, hash_type: str, result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö –¥–ª—è —Ö—ç—à–∞ —Ñ–∞–π–ª–∞
        
        Args:
            file_hash: –•—ç—à —Ñ–∞–π–ª–∞
            hash_type: –¢–∏–ø —Ö—ç—à–∞ (md5, sha1, sha256)
            result: –ë–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API VirusTotal –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—ç—à–∞
        try:
            api_key = os.environ.get("VIRUSTOTAL_API_KEY", "")
            
            if not api_key:
                result["error"] = "API –∫–ª—é—á VirusTotal –Ω–µ —É–∫–∞–∑–∞–Ω"
                return result
                
            headers = {
                "x-apikey": api_key
            }
            
            response = requests.get(
                f"https://www.virustotal.com/api/v3/files/{file_hash}",
                headers=headers
            )
            
            if response.status_code == 200:
                vt_data = response.json().get("data", {})
                attributes = vt_data.get("attributes", {})
                
                result["data"]["virustotal"] = {
                    "last_analysis_date": attributes.get("last_analysis_date"),
                    "last_analysis_stats": attributes.get("last_analysis_stats"),
                    "meaningful_name": attributes.get("meaningful_name"),
                    "type_description": attributes.get("type_description"),
                    "size": attributes.get("size"),
                    "md5": attributes.get("md5"),
                    "sha1": attributes.get("sha1"),
                    "sha256": attributes.get("sha256")
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≥—Ä–æ–∑—ã
                if attributes.get("last_analysis_stats", {}).get("malicious", 0) > 10:
                    result["data"]["threat_status"] = "–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥—Ä–æ–∑—ã"
                elif attributes.get("last_analysis_stats", {}).get("malicious", 0) > 3:
                    result["data"]["threat_status"] = "–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥—Ä–æ–∑—ã"
                elif attributes.get("last_analysis_stats", {}).get("malicious", 0) > 0:
                    result["data"]["threat_status"] = "–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥—Ä–æ–∑—ã"
                else:
                    result["data"]["threat_status"] = "–£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
                    
                result["found"] = True
                
            return result
        except Exception as e:
            logger.error(f"Error checking hash {file_hash}: {str(e)}")
            result["error"] = str(e)
            return result
    
    def _get_url_threat_data(self, url: str, result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö –¥–ª—è URL
        
        Args:
            url: URL
            result: –ë–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö
        """
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ URL
        import urllib.parse
        
        try:
            parsed_url = urllib.parse.urlparse(url)
            domain = parsed_url.netloc
            
            result["data"]["url_analysis"] = {
                "scheme": parsed_url.scheme,
                "domain": domain,
                "path": parsed_url.path,
                "query": parsed_url.query
            }
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–º–µ–Ω–µ
            if domain:
                domain_result = self._get_domain_threat_data(domain, {"data": {}})
                if "data" in domain_result:
                    for key, value in domain_result["data"].items():
                        result["data"][key] = value
                        
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API SafeBrowsing –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
            api_key = os.environ.get("SAFEBROWSING_API_KEY", "")
            
            if api_key:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                payload = {
                    "client": {
                        "clientId": "cybersec-consultant",
                        "clientVersion": "1.0"
                    },
                    "threatInfo": {
                        "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE", "POTENTIALLY_HARMFUL_APPLICATION"],
                        "platformTypes": ["ANY_PLATFORM"],
                        "threatEntryTypes": ["URL"],
                        "threatEntries": [
                            {"url": url}
                        ]
                    }
                }
                
                response = requests.post(
                    f"https://safebrowsing.googleapis.com/v4/threatMatches:find?key={api_key}",
                    json=payload
                )
                
                if response.status_code == 200:
                    sb_data = response.json()
                    
                    if "matches" in sb_data and sb_data["matches"]:
                        result["data"]["safebrowsing"] = {
                            "threats": sb_data["matches"]
                        }
                        result["data"]["threat_status"] = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–≥—Ä–æ–∑—ã –≤ Safe Browsing"
                    else:
                        result["data"]["safebrowsing"] = {
                            "threats": []
                        }
                        result["data"]["threat_status"] = "–£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ Safe Browsing"
                        
            result["found"] = True
            return result
        except Exception as e:
            logger.error(f"Error checking URL {url}: {str(e)}")
            result["error"] = str(e)
            return result
    
    def _get_text_threat_data(self, text: str, result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É–≥—Ä–æ–∑
        
        Args:
            text: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            result: –ë–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö
        """
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        try:
            import re
            
            # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–≥—Ä–æ–∑ –≤ —Ç–µ–∫—Å—Ç–µ
            indicators = {
                "ips": re.findall(r"\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b", text),
                "domains": re.findall(r"\b(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}\b", text),
                "md5": re.findall(r"\b[a-fA-F0-9]{32}\b", text),
                "sha1": re.findall(r"\b[a-fA-F0-9]{40}\b", text),
                "sha256": re.findall(r"\b[a-fA-F0-9]{64}\b", text),
                "urls": re.findall(r"https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+", text)
            }
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for key in indicators:
                indicators[key] = list(set(indicators[key]))
                
            result["data"]["indicators"] = indicators
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            for indicator_type, values in indicators.items():
                if values:
                    if indicator_type == "ips" and values[0]:
                        ip_result = self._get_ip_threat_data(values[0], {"data": {}})
                        if "data" in ip_result:
                            result["data"]["ip_analysis"] = {
                                "ip": values[0],
                                "data": ip_result["data"]
                            }
                    elif indicator_type == "domains" and values[0]:
                        domain_result = self._get_domain_threat_data(values[0], {"data": {}})
                        if "data" in domain_result:
                            result["data"]["domain_analysis"] = {
                                "domain": values[0],
                                "data": domain_result["data"]
                            }
                    elif indicator_type in ["md5", "sha1", "sha256"] and values[0]:
                        hash_type = indicator_type
                        hash_result = self._get_hash_threat_data(values[0], hash_type, {"data": {}})
                        if "data" in hash_result:
                            result["data"]["hash_analysis"] = {
                                "hash": values[0],
                                "type": hash_type,
                                "data": hash_result["data"]
                            }
                    elif indicator_type == "urls" and values[0]:
                        url_result = self._get_url_threat_data(values[0], {"data": {}})
                        if "data" in url_result:
                            result["data"]["url_analysis"] = {
                                "url": values[0],
                                "data": url_result["data"]
                            }
                            
            result["found"] = True
            return result
        except Exception as e:
            logger.error(f"Error analyzing text: {str(e)}")
            result["error"] = str(e)
            return result
