# –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
!git clone https://github.com/Andrew821667/cybersec-consultant.git
%cd cybersec-consultant

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
!pip install -r requirements.txt

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
from cybersec_consultant import create_consultant

# –ó–∞–ø—Ä–æ—Å API –∫–ª—é—á–∞
api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á OpenAI: ")
import os
os.environ["OPENAI_API_KEY"] = api_key

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
consultant = create_consultant()

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
consultant.initialize_knowledge_base("knowledge_base/knowledge_base_cybernexus.txt")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
def ask_consultant(query):
    print("\n" + "="*80)
    print(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")
    print("="*80)
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    search_results = consultant.search_knowledge_base(query, k=3)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_prompt = f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    for i, result in enumerate(search_results):
        if isinstance(result, tuple) and len(result) >= 2:
            if hasattr(result[0], 'page_content'):
                user_prompt += f"[–î–æ–∫—É–º–µ–Ω—Ç {i+1}]\n{result[0].page_content}\n\n"
    
    user_prompt += "–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = consultant.prompt_manager.get_prompt('standard')
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    response = consultant.llm_interface.generate_answer(
        system_prompt=system_prompt,
        user_prompt=user_prompt
    )
    
    # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
    if isinstance(response, dict) and 'answer' in response:
        print("\nüìù –û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:")
        print(response['answer'])
    else:
        print("\nüìù –û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:")
        print(response)

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
sample_queries = [
    "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏—à–∏–Ω–≥ –∏ –∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –Ω–µ–≥–æ?",
    "–ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã?",
    "–ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç DDoS –∞—Ç–∞–∫?",
    "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?",
    "–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —É—Ç–µ—á–∫–∏?"
]

# –í—ã–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
print("\nüìä –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
for i, q in enumerate(sample_queries):
    print(f"{i+1}. {q}")

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
while True:
    user_input = input("\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ")
    
    if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
        break
        
    if user_input.isdigit() and 1 <= int(user_input) <= len(sample_queries):
        ask_consultant(sample_queries[int(user_input)-1])
    else:
        ask_consultant(user_input)
